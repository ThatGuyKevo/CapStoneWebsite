[{"/Users/thatguykev/Desktop/eCommerce-Website/client/src/index.js":"1","/Users/thatguykev/Desktop/eCommerce-Website/client/src/App.js":"2","/Users/thatguykev/Desktop/eCommerce-Website/client/src/data.js":"3","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/HomeScreen.js":"4","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/ProductScreen.js":"5","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/Product.js":"6","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/Rating.js":"7","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/LoadingBox.js":"8","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/MessageBox.js":"9","/Users/thatguykev/Desktop/eCommerce-Website/client/src/utils.js":"10","/Users/thatguykev/Desktop/eCommerce-Website/client/src/Store.js":"11","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/CartScreen.js":"12","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/SignInScreen.js":"13","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/ShippingAddressScreen.js":"14","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/CheckoutSteps.js":"15","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/SignUpScreen.js":"16","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/PaymentMethodScreen.js":"17","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/PlaceOrderScreen.js":"18","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/OrderScreen.js":"19","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/StripeCheckout.js":"20","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/OrderHistoryScreen.js":"21","/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/ProfileScreen.js":"22"},{"size":616,"mtime":1668474605790,"results":"23","hashOfConfig":"24"},{"size":4415,"mtime":1668483671438,"results":"25","hashOfConfig":"24"},{"size":1276,"mtime":1665448894529,"results":"26","hashOfConfig":"27"},{"size":1872,"mtime":1668483522934,"results":"28","hashOfConfig":"24"},{"size":5762,"mtime":1666407815234,"results":"29","hashOfConfig":"24"},{"size":1722,"mtime":1667968983525,"results":"30","hashOfConfig":"24"},{"size":1555,"mtime":1665511635780,"results":"31","hashOfConfig":"24"},{"size":223,"mtime":1666396585923,"results":"32","hashOfConfig":"24"},{"size":183,"mtime":1666398151646,"results":"33","hashOfConfig":"24"},{"size":150,"mtime":1666398476474,"results":"34","hashOfConfig":"24"},{"size":2411,"mtime":1668455590271,"results":"35","hashOfConfig":"24"},{"size":5255,"mtime":1666411250084,"results":"36","hashOfConfig":"24"},{"size":2533,"mtime":1667984990418,"results":"37","hashOfConfig":"24"},{"size":3737,"mtime":1668092688280,"results":"38","hashOfConfig":"24"},{"size":493,"mtime":1668049186497,"results":"39","hashOfConfig":"24"},{"size":3320,"mtime":1668128252210,"results":"40","hashOfConfig":"24"},{"size":2079,"mtime":1668473181742,"results":"41","hashOfConfig":"24"},{"size":6236,"mtime":1668483503130,"results":"42","hashOfConfig":"24"},{"size":8413,"mtime":1668480353029,"results":"43","hashOfConfig":"24"},{"size":1684,"mtime":1668467416616,"results":"44","hashOfConfig":"24"},{"size":2958,"mtime":1668480611501,"results":"45","hashOfConfig":"24"},{"size":3153,"mtime":1668483302619,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lzwjy7",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"upf0np",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},"/Users/thatguykev/Desktop/eCommerce-Website/client/src/index.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/App.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/data.js",[],[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/HomeScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/ProductScreen.js",[],[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/Product.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/Rating.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/LoadingBox.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/MessageBox.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/utils.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/Store.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/CartScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/SignInScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/ShippingAddressScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/CheckoutSteps.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/SignUpScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/PaymentMethodScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/PlaceOrderScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/OrderScreen.js",["117","118","119"],[],"import React, { useContext, useEffect, useReducer, useState } from \"react\";\nimport LoadingBox from \"../components/LoadingBox\";\nimport MessageBox from \"../components/MessageBox\";\nimport { Store } from \"../Store\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getError } from \"../utils\";\nimport axios from \"axios\";\nimport { Helmet } from \"react-helmet-async\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Card from \"react-bootstrap/Card\";\nimport { Link } from \"react-router-dom\";\nimport { loadStripe } from \"@stripe/stripe-js/pure\";\nimport StripeCheckout from \"../components/StripeCheckout\";\nimport { toast } from \"react-toastify\";\nimport { PayPalButtons, usePayPalScriptReducer } from \"@paypal/react-paypal-js\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return { ...state, loading: true, error: \"\" };\n    case \"FETCH_SUCCESS\":\n      return { ...state, loading: false, order: action.payload, error: \"\" };\n    case \"FETCH_FAIL\":\n      return { ...state, loading: false, error: action.payload };\n    case \"PAY_REQUEST\":\n      return { ...state, loadingPay: true };\n    case \"PAY_SUCCESS\":\n      return { ...state, loadingPay: false, successPay: true };\n    case \"PAY_FAIL\":\n      return { ...state, loadingPay: false };\n    case \"PAY_RESET\":\n      return { ...state, loadingPay: false, successPay: false };\n    default:\n      return state;\n  }\n}\nexport default function OrderScreen() {\n  const { state } = useContext(Store);\n  const { userInfo } = state;\n\n  const params = useParams();\n  const { id: orderId } = params;\n  const navigate = useNavigate();\n\n  const [{ loading, error, order, successPay, loadingPay }, dispatch] =\n    useReducer(reducer, {\n      loading: true,\n      order: {},\n      error: \"\",\n      successPay: false,\n      loadingPay: false,\n    });\n\n  function createOrder(data, actions) {\n    return actions.order\n      .create({\n        purchase_units: [\n          {\n            amount: { value: order.totalPrice },\n          },\n        ],\n      })\n      .then((orderID) => {\n        return orderID;\n      });\n  }\n\n  function onApprove(data, actions) {\n    return actions.order.capture().then(async function (details) {\n      try {\n        dispatch({ type: \"PAY_REQUEST\" });\n        const { data } = await axios.put(\n          `/api/orders/${order._id}/pay`,\n          details,\n          {\n            headers: { authorization: `Bearer ${userInfo.token}` },\n          }\n        );\n        dispatch({ type: \"PAY_SUCCESS\", payload: data });\n        toast.success(\"Order is paid\");\n      } catch (err) {\n        dispatch({ type: \"PAY_FAIL\", payload: getError(err) });\n        toast.error(getError(err));\n      }\n    });\n  }\n  function onError(err) {\n    toast.error(getError(err));\n  }\n  const [{ isPending }, paypalDispatch] = usePayPalScriptReducer();\n\n  useEffect(() => {\n    const fetchOrder = async () => {\n      try {\n        dispatch({ type: \"FETCH_REQUEST\" });\n        const { data } = await axios.get(`/api/orders/${orderId}`, {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        dispatch({ type: \"FETCH_SUCCESS\", payload: data });\n      } catch (err) {\n        dispatch({ type: \"FETCH_FAIL\", payload: getError(err) });\n      }\n    };\n\n    if (!userInfo) {\n      return navigate(\"/login\");\n    }\n\n    if (!order._id || successPay || (order._id && order._id !== orderId)) {\n      fetchOrder();\n      if (successPay) {\n        dispatch({ type: \"PAY_RESET\" });\n      }\n    } else {\n      const loadPaypalScript = async () => {\n        const { data: clientId } = await axios.get(\"/api/keys/paypal\", {\n          headers: { authorization: `Bearer ${userInfo.token}` },\n        });\n        paypalDispatch({\n          type: \"resetOptions\",\n          value: {\n            \"client-id\": clientId,\n            currency: \"USD\",\n          },\n        });\n        paypalDispatch({ type: \"setLoadingStatus\", value: \"pending\" });\n      };\n      loadPaypalScript();\n    }\n  }, [order, userInfo, orderId, navigate, paypalDispatch, successPay]);\n  return loading ? (\n    <LoadingBox></LoadingBox>\n  ) : error ? (\n    <MessageBox vartient=\"danger\">{error}</MessageBox>\n  ) : (\n    <div>\n      <Helmet>\n        <title>Order {orderId}</title>\n      </Helmet>\n      <h1 className=\"my-3\">Order {orderId}</h1>\n      <Row>\n        <Col md={8}>\n          <Card className=\"mb-3\">\n            <Card.Body>\n              <Card.Title>Shipping</Card.Title>\n              <Card.Text>\n                <strong>Name:</strong> {order.shippingAddress.fullName} <br />\n                <strong>Address: </strong> {order.shippingAddress.address},\n                {order.shippingAddress.city}, {order.shippingAddress.postalCode}\n                ,{order.shippingAddress.country}\n              </Card.Text>\n              {order.isDelivered ? (\n                <MessageBox variant=\"success\">\n                  Delivered at {order.deliveredAt}\n                </MessageBox>\n              ) : (\n                <MessageBox variant=\"danger\">Not Delivered</MessageBox>\n              )}\n            </Card.Body>\n          </Card>\n\n          <Card className=\"mb-3\">\n            <Card.Body>\n              <Card.Title>Payment</Card.Title>\n              <Card.Text>\n                <strong>Method:</strong> {order.paymentMethod}\n              </Card.Text>\n              {order.isPaid ? (\n                <MessageBox variant=\"success\">\n                  Paid at {order.paidAt}\n                </MessageBox>\n              ) : (\n                <MessageBox variant=\"danger\">Not Paid</MessageBox>\n              )}\n            </Card.Body>\n          </Card>\n\n          <Card className=\"mb-3\">\n            <Card.Body>\n              <Card.Title>Items</Card.Title>\n              <ListGroup variant=\"flush\">\n                {order.orderItems.map((item) => (\n                  <ListGroup.Item key={item._id}>\n                    <Row className=\"align-items-center\">\n                      <Col md={6}>\n                        <img\n                          src={item.image}\n                          alt={item.name}\n                          className=\"img-fluid rounded img-thumbnail\"></img>{\" \"}\n                        <Link to={`/product/${item.slug}`}>{item.name}</Link>\n                      </Col>\n                      <Col md={3}>\n                        <span>{item.quantity}</span>\n                      </Col>\n                      <Col md={3}>${item.price}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={4}>\n          <Card className=\"mb-3\">\n            <Card.Body>\n              <Card.Title>Order Summary</Card.Title>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Items</Col>\n                    <Col>${order.itemsPrice.toFixed(2)}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Shipping</Col>\n                    <Col>${order.shippingPrice.toFixed(2)}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Tax</Col>\n                    <Col>${order.taxPrice.toFixed(2)}</Col>\n                  </Row>\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Total</Col>\n                    <Col>${order.totalPrice.toFixed(2)}</Col>\n                  </Row>\n                </ListGroup.Item>\n                {!order.isPaid && (\n                  <ListGroup.Item>\n                    {isPending ? (\n                      <LoadingBox />\n                    ) : (\n                      <div>\n                        <PayPalButtons\n                          createOrder={createOrder}\n                          onApprove={onApprove}\n                          onError={onError}></PayPalButtons>\n                      </div>\n                    )}\n                    {loadingPay && <LoadingBox></LoadingBox>}\n                  </ListGroup.Item>\n                )}\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","/Users/thatguykev/Desktop/eCommerce-Website/client/src/components/StripeCheckout.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/OrderHistoryScreen.js",[],[],"/Users/thatguykev/Desktop/eCommerce-Website/client/src/screens/ProfileScreen.js",["120","121"],[],"import React, { useContext, useReducer, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Store } from \"../Store\";\nimport { toast } from \"react-toastify\";\nimport { getError } from \"../utils\";\nimport axios from \"axios\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATE_REQUEST\":\n      return { ...state, loadingUpdate: true };\n    case \"UPDATE_SUCCESS\":\n      return { ...state, loadingUpdate: false };\n    case \"UPDATE_FAIL\":\n      return { ...state, loadingUpdate: false };\n\n    default:\n      return state;\n  }\n};\n\nexport default function ProfileScreen() {\n  const { state, dispatch: ctxDispatch } = useContext(Store);\n  const { userInfo } = state;\n  const [name, setName] = useState(userInfo.name);\n  const [email, setEmail] = useState(userInfo.email);\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const [{ loadingUpdate }, dispatch] = useReducer(reducer, {\n    loadingUpdate: false,\n  });\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.put(\n        \"/api/users/profile\",\n        {\n          name,\n          email,\n          password,\n        },\n        {\n          headers: { Authorization: `Bearer ${userInfo.token}` },\n        }\n      );\n      dispatch({\n        type: \"UPDATE_SUCCESS\",\n      });\n      ctxDispatch({ type: \"USER_SIGNIN\", payload: data });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      toast.success(\"User updated successfully\");\n    } catch (err) {\n      dispatch({\n        type: \"FETCH_FAIL\",\n      });\n      toast.error(getError(err));\n    }\n  };\n\n  return (\n    <div className=\"container small-container\">\n      <Helmet>\n        <title>User Profile</title>\n      </Helmet>\n      <h1 className=\"my-3\">User Profile</h1>\n      <form onSubmit={submitHandler}>\n        <Form.Group className=\"mb-3\" controlId=\"name\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"name\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"password\">\n          <Form.Label>Confirm Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            onChange={(e) => setConfirmPassword(e.target.value)}\n          />\n        </Form.Group>\n        <div className=\"mb-3\">\n          <Button type=\"submit\">Update</Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n",{"ruleId":"122","severity":1,"message":"123","line":1,"column":52,"nodeType":"124","messageId":"125","endLine":1,"endColumn":60},{"ruleId":"122","severity":1,"message":"126","line":14,"column":10,"nodeType":"124","messageId":"125","endLine":14,"endColumn":20},{"ruleId":"122","severity":1,"message":"127","line":15,"column":8,"nodeType":"124","messageId":"125","endLine":15,"endColumn":22},{"ruleId":"122","severity":1,"message":"128","line":30,"column":10,"nodeType":"124","messageId":"125","endLine":30,"endColumn":25},{"ruleId":"122","severity":1,"message":"129","line":32,"column":12,"nodeType":"124","messageId":"125","endLine":32,"endColumn":25},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'loadStripe' is defined but never used.","'StripeCheckout' is defined but never used.","'confirmPassword' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used."]